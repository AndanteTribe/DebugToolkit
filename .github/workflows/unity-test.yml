name: Run the Unity Test
on:
  pull_request_target:
    types:
      - labeled
  push:
    branches:
    - main
  workflow_dispatch: {}

jobs:
  build:
      name: Run the Unity Test
      runs-on: ubuntu-latest
      if: github.event.label.name == 'request-ci'
      steps:
        - uses: actions/checkout@v4
          with:
            ref: ${{ github.event.pull_request.head.sha }}
        - name: Set outputs
          id: vars
          run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        - uses: actions/cache@v4
          with:
            path: Library
            key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
            restore-keys: |
              Library-
        - name: Free disk space
          run:  |
            chmod +x ./.github/workflows/scripts/free_disk_space.sh
            .github/workflows/scripts/free_disk_space.sh
            git checkout -- ./.github/workflows/scripts/free_disk_space.sh
        - uses: game-ci/unity-test-runner@v4
          id: tests
          env:
            UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
            UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
            UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          with:
            githubToken: ${{ secrets.GITHUB_TOKEN }}
            unityVersion: auto
            testMode: playmode
            coverageOptions: 'generateHtmlReport;generateAdditionalReports;assemblyFilters:+DebugToolkit.Tests'
        - uses: actions/upload-artifact@v4
          if: always()
          with:
            name: Test results
            path: artifacts
            retention-days: 2
        - uses: actions/upload-artifact@v4
          if: always()
          with:
            name: Coverage Results
            path: CodeCoverage
            retention-days: 2
        - name: Upload Coverage Report
          run: |
            for file in CodeCoverage/**/Summary.md; do
              if [ -f "$file" ]; then
                cat "$file" >> $GITHUB_STEP_SUMMARY
              fi
            done
        - name: Upload images via curl
          env:
            IMGUR_CLIENT_ID: ${{ secrets.IMGUR_CLIENT_ID }}
          run: |
            markdown_lines=""

            for file in artifacts-screenshot/*; do
              if file --mime-type "$file" | grep -q image/; then
                response=$(curl -s -H "Authorization: Client-ID $IMGUR_CLIENT_ID" \
                                 -F "image=@$file" https://api.imgur.com/3/image)
                link=$(echo "$response" | jq -r '.data.link')
                success=$(echo "$response" | jq -r '.success')
                if [ "$success" = "true" ]; then
                  markdown_lines="${markdown_lines}![](${link})"
                fi
              fi
            done

            echo "$markdown_lines" >>  $GITHUB_STEP_SUMMARY
